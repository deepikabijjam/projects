# -*- coding: utf-8 -*-
"""Copy of titanic_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13LANwngGQcRxv25ZYwkYzZmnGy-juins
"""

import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

file_path ="/content/file.csv"

dataset_path = "/content/train.csv"

titanic_df = pd.read_csv(dataset_path)

titanic_df

titanic_df.describe()

titanic_df.info()

titanic_df.isnull().sum()

sns.heatmap(titanic_df.isnull(),yticklabels=False,cbar=False,cmap='viridis')

# Calculate the median age of the passengers
median_age = titanic_df["Age"].median()
median_aged=int(median_age)
median_aged

titanic_df["Age"]=titanic_df["Age"].fillna(value=28)
titanic_df["Age"] = titanic_df["Age"].astype(int)
titanic_df

titanic_df.isnull().sum()

survival_count =titanic_df.groupby("Survived")["PassengerId"].count()
# surived=1,not survived=0
# Create a bar plot to visualize the counts
plt.bar(survival_count.index, survival_count.values)
plt.xlabel("Survived")
plt.ylabel("Passenger Count")
plt.xticks([0, 1])
plt.title("Titanic Survival Count")
plt.show()

# Visualize the distribution of the "Fare" variable using a box plot
plt.boxplot(titanic_df["Fare"])
plt.xlabel("Fare")
plt.title("Fare distribution")
plt.show()

# Visualize the relationship between "Age" and "Surrvived" using a scatter plot
plt.scatter(titanic_df["Survived"], titanic_df["Age"])
plt.xlabel("Survived")
plt.xticks([0, 1])
plt.ylabel("Age")
plt.title("Age vs. Survived")
plt.show()

# Create a heatmap to visualize the correlation between variables
corr_matrix = titanic_df.corr()
sns.heatmap(corr_matrix, annot=True, cmap="cool")
plt.title("Correlation matrix")
plt.show()

titanic_df['Sex'].value_counts()

# Map "Sex" column to binary values
titanic_df["Sex_binary"] = titanic_df["Sex"].map({"male": 1, "female": 0})

# Print the new "Sex_binary" column
print(titanic_df["Sex_binary"])

titanic_df

# Use a bar plot to visualize the count of passengers by sex
sex_counts = titanic_df["Sex_binary"].value_counts()
plt.bar(sex_counts.index, sex_counts.values)
plt.xlabel("Sex_binary")
plt.xticks([0, 1])
plt.ylabel("Count")
plt.title("Passenger counts by sex")
plt.show()

# Use a pie chart to visualize the proportion of passengers by class
class_counts = titanic_df["Survived"].value_counts()
plt.pie(class_counts.values, labels=class_counts.index, autopct='%1.1f%%')
plt.title("survived and not survived")
plt.show()

# Use a violin plot to visualize the distribution of ages by sex
sns.violinplot(x=titanic_df["Sex_binary"], y=titanic_df["Age"])

plt.xlabel("Sex_binary")
plt.ylabel("Age")
plt.title("Age distribution by sex")
plt.show()

# Example: create a histogram of the ages of passengers
plt.hist(titanic_df["Age"], bins=20)
plt.xlabel("Age")
plt.ylabel("Count")
plt.show()

titanic_df['Embarked'].value_counts()

gp=titanic_df.groupby('Survived')
gp['Embarked'].value_counts()

titanic_df['Embarked']=titanic_df['Embarked'].fillna(value='S')
titanic_df

sns.heatmap(titanic_df.corr(), annot=True, fmt='.0%')

sns.set_style('whitegrid')
sns.countplot(x='Survived',hue='Embarked',data=titanic_df,palette='rainbow')

sns.set_style('whitegrid')
sns.countplot(x='Survived',hue='Sex_binary',data=titanic_df,palette='rainbow')

# Drop the "Cabin" column
titanic_df.drop("Cabin",axis=1,inplace=True)
titanic_df.drop("Ticket",axis=1,inplace=True)
titanic_df.drop("Sex",axis=1,inplace=True)
titanic_df.drop("Fare",axis=1,inplace=True)

# Print the result
print(titanic_df)

titanic_df.drop("PassengerId",axis=1,inplace=True)
titanic_df.drop("Name",axis=1,inplace=True)
titanic_df

titanic_df.drop("Embarked",axis=1,inplace=True)
titanic_df

X_train, X_test, y_train, y_test = train_test_split(titanic_df.drop(['Survived'], axis=1), titanic_df['Survived'], test_size=0.2, random_state=42)
rfc = RandomForestClassifier(n_estimators=100, random_state=42)
rfc.fit(X_train, y_train)
y_pred = rfc.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)